// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String         @id @default(uuid())
  username String
  password String
  groups   GroupsOfUser[]
  shipment Shipment?
}

model Groups {
  id            String         @id @default(uuid())
  groupName     String
  levelOfAccess Int
  users         GroupsOfUser[]
}

model Customers {
  id            String      @id @default(uuid())
  name          String
  email         String
  address       String
  // relation with orders
  Orders        Orders[]
  Distributor   Distributor @relation(fields: [distributorId], references: [id])
  distributorId String
}

model Products {
  id             String       @id @default(uuid())
  name           String
  description    String
  price_in_cents Int
  // orders         ProductsOfOrder[]
  OrderItems     OrderItems[]
  Distributor    Distributor? @relation(fields: [distributorId], references: [id])
  distributorId  String?
}

enum Type {
  Buy
  Sell
}

model Orders {
  id             String       @id @default(uuid())
  total_in_cents Int
  customer       Customers    @relation(fields: [customerId], references: [id])
  customerId     String
  createdAt      DateTime     @default(now())
  OrderItems     OrderItems[]
  type           Type

  // relation with orderItems, Custommers and Distributors
}

model OrderItems {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  order     Orders   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Products @relation(fields: [productId], references: [id])
  productId String
}

model Distributor {
  id        String      @id @default(uuid())
  name      String
  customers Customers[]
  products  Products[]

  // relation with orders customers and products
}

model GroupsOfUser {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  groups     Groups   @relation(fields: [groupId], references: [id])
  groupId    String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, groupId])
}

model Shipment {
  id               String @id @default(uuid())
  temperature      Int
  origin           String
  destiny          String
  fuelPriceInCents Int

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique()
}
